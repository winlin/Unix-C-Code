					深入理解进程
1.	可以认为一个进程就是一个执行流程，在顺序执行时CPU的程序计数器总是指向下一条要执行的指令的地址，如果CPU或程序指令修改了程序计数器的内容，
执行流程就发生了条转。
	一个进程具有如下要素：
		程序映像：二进制指令序列
		地址空间：用于存放程序和执行程序
		PCB进程控制块：内核中描述进程的主要数据结构

----------------------------------------
补充:  
   调度
  
#include<linux/sched.h>
void schedule(void);

调度点: 内核中可以发生上下文切换的地方称为调度点;
非抢占式多任务系统: 调度点之存在于进程上下文中,也就是系统调用中,那么只有当进程调用了相关的系统调用才可能发生调度,
		    这种系统称为非抢占式多任务系统
抢占式多任务系统: 如果在某个中断内也加入调度点, 并且则这个中断是不断发生的,这种系统就称为抢占式多任务系统

Linux是抢占式多任务系统, 它的调度点设置在所有陷阱,中断以及本分异常返回用户态前.

抢占的实质是因为发生了中断, 在中断内进行了调度.
----------------------------------------

2.	创建一个进程：
		Linux系统中可以使用3种系统调用创建进程:fork(),vfork(),clone()。前两个是所有类UNIX系统都提供的传统的创建进程的系统调用，
而clone()是Linux系统独有的用于创建线程的系统调用，它可以用来创建线程和进程。
The main use of clone() is to implement threads:  multiple  threads  of control in a program that run concurrently in a shared 
memory space. Unlike fork(2), these calls allow the child process to share  parts  of its  execution  context  with  the  calling
process, such as the memory space, the table of file descriptors, and the table of signal handlers.
	 使用vfork()时，父进程会一直阻塞，则到子进程退出或调用exec()执行新的程序。在现代操作系统中 fork 实现采用“写时复制”技术，因此
fork系统调用与vfork的工作效率几乎一样。“写时复制”的实现如下：
	@ 当一个进程创建时，它与父进程尽可能地共享同样的物理内存，内核仅仅复制进程的页表项并标明页的属性是“写时复制”
	@ 当进程去修改内存时，就会引发一个页异常，在异常处理过程中，内核会分配新的物理页并复制要修改的内存，然后重新进行内存映射
	@ 当异常处理完毕返回后，进程修改的已经是新的物理内存，不会影响原来的内存空间

3.进程与信号
	信号是内核提供的一种异步消息机制，主要用于内核对进程发送异步通知事件，可以理解为对进程的执行流程的一个“软中断”。信号总是由
内核递交给进程的，但从应用程序的角度来讲，信号的来源是多种多样的，如下所示：
	@ 当进程在一个没有打开的管道等待时，内核发出 SIGPIPE 信号。
	@ 进程在Shell中前台执行时，用户按下Ctrl+c，将向进程发送SIGINT信号。
	@ 进程访问非法的内存地址的时候内核向其发送“段错误”SIGSEGV 信号。

4.Linux中的信号处理机制：
	在内核对进程进行管理的PCB信息块中有若干个字节，其中每个bit用于表示某个信号是否发生。当向某个进程发送消息时，就将其PCB信息中对应
的bit置1.但是对信号的处理并不立即进行，内核会在从内核态返回用户态时对当前进程的PCB中表示信号的数据进行检查，如果有信号发生，则内核会修改
当前进程栈中的信息，使得返回用户态后首先执行与信号绑定的函数，然后再从当前进程被中断或进行系统调用的地方继续执行。
	根据以上描述，如果系统一直没有从内核态返回到用户态，则信号就的不到处理。实际上，不仅是进行系统调用时进程会进入内核态，当中断发生时
也会进入内核态。因为中断的不确定性从而导致 信号何时被处理是无法预知的。
        注意：信号处理函数虽然不在进程的正常执行流程中，但也是在用户态执行的代码，处于进程的上下文中，因此可以方法进程的虚拟地址空间。
	一、发送信号
	    给某个进程发送信号实质上就是将其PCB对应的bit位置1.这个操作只能由内核来进行，应用程序可以通过系统调用来间接的完成这个操作。
	二、信号屏蔽
	    每个进程都有一个用于描述那些信号将被屏蔽的信号集，成为信号掩码，如果某个信号在进程的信号掩码中，则发送到进程的这种信号将会
	    被屏蔽。注意，屏蔽只是延迟信号的到达，信号会在解除屏蔽以后继续传递。在信号处理函数和程序的其他部分共享全局变量时，一般会在
	    访问变量前屏蔽信号，以免在访问过程中发生信号而导致同步问题，访问完毕再解除对信号的屏蔽。
	三、忽略信号
	    忽略信号就是指当进程收到某个信号时直接丢弃，对进程的执行没有影响。但有些信号是不能被丢弃的 SIGKILL/SIGSTOP。
	四、捕捉信号
	   对于每个信号来说，系统都有默认的信号处理函数。如果程序中用自己定义的函数取代了默认的信号处理函数，则称为捕捉了这个信号。
          
      signal函数的使用方法比较简单，单并不属于POSIX标准，在不同种类的UNIX的实现不尽相同，因此受到一定的限制。而POSIX标准定义的信号
处理接口是sigaction().

	信号安全函数 :
	     进程在收到信号并对其进行处理时，会中断当前正在执行的指令序列，转而去执行信号处理函数。如果进程在收到信号时正在执行某个
	     不可冲入的函数，这时捕捉到信号，进程就会转而执行信号处理函数，如果在信号处理函数中又再次调用了同一个函数，就有可能产生
	     问题。因此，有些函数是不能在信号处理函数中调用的，那些可以在信号处理函数中调用且不会有潜在问题的函数称为：对信号安全的。
	     可以使用   man 7 signal 来查看信号安全的函数。

5.进程与文件
	内核文件管理：
	    在内核中，对应与每个进程都有一个“文件描述符表”，表示这个进程打开的所有文件。“文件描述符表”中的每一向都是一个指针，指向一个
	    用于描述打开文件的数据块，可称为“file对象”。“file对象”中描述了文件的打开模式、读写位置等重要信息。当一个进程打开一个文件时，
	    内核中就会创建一个新的“file对象”。注意，“file对象”不是专属于每个进程的，不同进程的“文件描述符表”中的指针可以指向相同的“file对象”，
	    从而共享这个打开的文件。“file对象”有引用计数，因此某个进程关闭了文件不会影响其他与之共享同一个“file对象”的进程。
	    “file对象”中包含了一个指针，指向"dentry对象"。“dentry对象”代表了一个独立的文件路径，如果一个文件路径被打开多次，那么会建立多个
	    “file对象”，但他们都指向统一个“dentry对象”。也就是说一个绝对路径的文件不管被打开多少次都只有一个“dentry对象”。
	    “dentry对象”中又包含一个指向“inode对象”的指针。"inode对象"代表一个独立的文件。因为存在软/硬链接，所以存在不同的“dentry对象”可能
	    指向同一个“inode对象”。“inode对象”包含了最终对文件操作所需的所有信息，如文件系统类型、文件的操作方法、文件的权限、访问日期等。

	    注意：上述的“文件描述符表”，“file对象”，“dentry对象”，“inode对象”都是“内核”用于文件管理的数据，应用程序是不可直接访问的。
	    第一个可用的文件描述符是3，012是系统使用。
	    打开文件以后，进程得到的文件描述符实质上就是文件描述表的下标，内核根据这个下标值去访问相应的文件对象，从而实现对文件的操作。
	进程中的文件：
	    在C语言程序中，文件是以“文件指针及文件描述符”表示的。标准C库函数(fopen,fclose,fread etc.)使用文件指针，而系统的I/O功能(open,
	    read,write etc.)使用文件描述符。实际上文件指针是对文件描述符的包装。
	    标准输入/输出/错误 文件的文件指针为 stdin,stdout,stderr 定义在 stdio.h;
            文件描述符为 STDIN_FILENO,STDOUT_FILENO,STDERR_FILENO 定义在 unistd.h。
	    使用open打开一个问件时，内核将新建一个“file对象”，并在进程的文件描述符中寻找一个空位存放对象的指针，然后返回它的“下标”作为
	    文件描述符。注意：同一个进程多次打开同一个文件时，内核会创建多个“file对象”。
	    当进程使用fork系统调用创建一个子进程后，子进程将继承父进程的文件描述符。
	    注意：父子进程是共用文件读写指针的，两者会有影响。使用 exec 函数族执行新程序时，默认情况下不会关闭原来已经打开的文件描述符，
	    因此，在新的程序中不需要打开文件就可以直接使用原来的文件描述符进行操作。这有时是不安全的，可以通过fcntl()来设置close-on-exec
	    属性，这样调用exec时程序打开的文件就会自动关闭。
	    int cflag;
	    cflag=fcntl(fd,F_GETFD);  //获得close-on-exec标志
	    fcntl(fd,F_SETFD,FD_CLOEXEC); //设置close-on-exec标志

       文件重定向:
           已知，文件描述符就是对进程的文件描述符表进行索引的下标。文件描述符表中的每个条目指向一个“file对象”，因此如果能够修改文件描述符
	   表中的条目，使之指向其他“file对象”,就可以实现重定向。 这种修改可以通过 dup()/dup2() 来实现。


       文件控制：
	  fctnl 函数是一个对文件进行控制的通用函数，它能够获取与设置一个打开文件的控制属性。 

       进程间通讯：
		详见IPC文件夹
		Linux IPC接口主要包含了System V IPC,POSIX IPC及BSD Socket的各种接口。现在的大部分类UNIX操作系统都支持POSIX标准。Linux系统
		从一开始就遵循POSIX标准，因此一般情况下推荐使用POSIX接口。
		
         1.管道和命名管道：pipe/mkfifo
		命名管道可以用于无亲源关系的进程进行通讯；管道用于父子进程通讯。所有LINUX/UNIX平台都支持管道和命名管道，因此有良好的移植性。
	 2.消息队列：msgget/msgctl/msgrcv/msgsnd
		消息队列是消息的链表，并且支持消息类型与优先级。LINUX支持两种消息队列：POSIX消息队列 和 System V消息队列。
	 3.共享内存：mmap
		是最高效的IPC方式，但有可能出现同步问题。LINUX支持两种共享内存机制：POSIX 和 System V。
	 4.信号灯:semget(POSIX/SYS V) ,sem_open(POSIX)
	        主要用于进程间或线程间的同步。LINUX支持两种：POSIX SYS V。
	 5.SCOKET: recv()/send()
	        即可用于本地通信(AF_LOCAL/AF_UNIX),又可用于网络通讯，可移植性较好。

	IPC 最重要的就是“同步问题”！！！


================================================================================
	编写守护进程程序的步骤：
	
	1.首先调用umask()将文件模式创建屏蔽字设置为0。由继承得来的屏蔽字可能会拒绝设置某些权限。
	    比如，若守护进程要创建一个组可读，写的文件，而继承的文件模式创建屏蔽字可能屏蔽了这两种
	    权限，于是所要求的组可读，写就不能起作用。
	2.调用fork，然后使父进程退出exit。  这样做实现了下面两点：第一，如果该守护进程是作为一条简单shell命令启动的，
	    那么父进程终止使得shell认为这条命令已经执行完毕；第二，子进程继承了父进程的进程组ID，但具有一个新的进程ID，
            这就保证了子进程不是一个进程组的组长。这时调用setsid调用的必要前提。
	3.调用setsid以创建一个新的会话。于是执行三个操作：a.称为新会话的首进程，b.称为一个新进程组的组长进程，c.没有控制终端。
	4.将当前工作目录更改为工作目录。从父进程继承的当前工作目录可能是在一个手动挂载的文件系统中，因为守护进程通常在引导之前
	   是一直存在的，所以如果守护进程的当前工作目录在一个装配文件系统中，那么该文件系统就不能被卸载。
	5.关闭不再需要的文件描述符。这使守护进程不再持有从其父进程继承来的某些文件描述符。守护进程可以拥有文件描述符。
	6.某些守护进程打开/dev/null使其具有文件描述符0，1，2，这样，任何一个试图读取标准输入输出或错误输出的库例程
	  都不会产生任何效果。

	补充： 对于守护进程中出现的错误，可以使用syslog()函数写入到记录文件里面。
	       如果守护进程需要读取配置文件的话，那么当我们修改配置文件，要让修改生效的话，往往需要重新启动守护进程，
	       为了避免重复的启动守护进程，我们可以让守护进程“创建一个线程来一直循环捕获SIGHUP信号”，这时重新读取配置文件。
	       访问一个被加锁的文件会得到SIGHUP信号。相关函数：sigwait(),sigaction(),sigprocmask(),pthread_sigmask()
	       pthread_sigmask - examine and change mask of blocked signals.
	       sigaction - examine and change a signal action.

	      

