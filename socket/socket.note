 使用了自定义的协议来传输一个字符串，即先发送4B，表示字符串的长度，然后再是字符串本身。
 这个协议是必要的，因为“在数据流形式的传输中，接收端无法分辨字符串在哪里结束。”  @@@@@@@@@@@@@@@@@@@@
 要非常注意这一点。 	

	1.物理层
		物理层主要负责物理信号的发送，它是所有网络通信的基础。物理层不仅仅是指进行传输所必须的硬件设施，而且还包括使得信号得以发送和
	接收的协议，如信号的调制方式等。物理层的数据是不可靠的。
	2.数据链路层
		主要负责数据的无差错传输。通过在传送的数据中加入校验字节，接收端可以进行查错或纠错，在一定程度上保证数据的正确性。但是链路层
	并不保证传输的可靠性，所以发送的数据包可能会丢失。我们熟知的以太网协议实际上既包含物理层的内容，有包含数据链路层的内容，由于这一协议
	使用MAC地址对节点进行控制，也常称为“MAC协议”。
	3.网络层
		利用数据链路层可以实现网络中直接相连的两个节点间互传数据，而网络层在它的基础上引入"路由与转发"的功能,因而可以在不直接相连的
	节点间互传数据。网络层的更大的意义在于，它可以使不同底层(物理层和数据链路层)的网络之间互联互通。 IP。也不能保证传输的可靠性。
	4.传输层
		有了传输层，网络中的节点可以同时与其他节点建立多个数据通路，他们之间互不干扰，常见有UDP/TCP。
		在Linux系统上，传输层及以下的层次都实现在内核中，上层采用的协议则有应用程序根据需要决定，因此实际上传输层以上的层次并不一定
		被实际使用。

	
	Socket编程接口：
	      在编程时，只有那些要在网络上传输的，并且为int或short int的信息才有网络字节序的问题。
	      SOCK_STREAM,SOCK_DGRAM类型的socket各有各的端口空间，两个不同类型的socket可以绑定在同一端口号上，并不冲突。
	      进行listen()操作的socket必须是 SOCK_STREAM 类型。
	      
	      int shutdown(int sockfd,int how) 
	      shutdown 函数可以切断连接，被切断连接的 socket 不能再进行通信，但仍处于打开状态，可以进行其他操作。
	      socket被关闭后，如果已经没有任何进程在使用，则同时会切断连接，因此编程时一般不需要显示地调用shutdown。

	      send/recv   sendto/recvfrom
        设置socket的选项：
			getsockopt()/setsockopt().
	设置地址可重用：
	         setsockopt()  socket设置了地址可重用以后，它锁绑定的socket地址就可以同时被其他socket绑定。但是要注意，同时绑定在
	      一个地址上的socket仍然只有一个能进行帧听。
	         出于安全考虑，被socket绑定的地址在这个socket被关闭后一段事件内仍然保持被绑定的状态，也就是不能为其他socket所绑定。
	      这将对服务器程序的重新启动造成影响。设置地址可重用后，服务器程序就可以立即重启，不必等待上次退出前绑定的地址重新成为
	      可用状态。
	         每个socket在系统的底层都有发送和接收缓冲区，调整这些缓冲区的大小将影响通信的性能。要注意的是，设置缓冲区大小会被内核
	      加倍。
	设置超时：
		 设置超时的意义在于，当以阻塞方式发送或接收数据时，进程的等待时间有一个上限。如果超过这个时间，则不管是否读到或写入数据
	      函数都会返回，这样就避免了进程一直阻塞在某个操作上。对于发送和接收操作，如果已经收到了部分数据，则超时后仍然返回收到的字节数，
	      如果超时后还没有收到数据，则返回-1，并且设置errno变量为EAGAIN。

	阻塞与非阻塞：
		 默认情况下socket是以阻塞方式进行的。如果要改为非阻塞方式，则有两种方法可以实现：
	    1.利用发送和接收本身的参数,如：
		send(sockfd,buf,len,MSG_DONTWAIT); 其中的MSG_DONTWAIT标志将使本次操作成为非阻塞。
	    2.另一种方法是利用socket本身也是文件的特性，修改文件的标志位。与open打开文件不同，打开的socket的socket()函数本身没有设置标志
		参数，因此必须在打开之后对标志位进行修改。可以使用fcntl()函数来实现。
		fcntl 是一个专门对文件描述符进行各种查询和设置操作的函数。
		      int flag=fcntl(sockfd,F_GETFL);  //得到旧的标志位
		      flag|=O_NONBLOCK;		       //增加非阻塞标志位
		      fcntl(sockfd,F_SETFL,flag);      //设置新的标志位
		 当文件设置了非阻塞标致位时，后续的所有相关操作都默认为非阻塞的。
		 
	可靠的发送与接收：
		使用阻塞方式进行读写的时候，要注意读写过程被信号打断的问题，特别是当读写一个数据流式socket时，如果连接已中断，则会发送SIGPIPE
	    信号，此信号的默认处理是使进程退出，通常这不是期望的结果。解决这个问题的办法之一是捕获SIGPIPE信号，另一种方法是在发送或接收时传入
	    MSG_NOSIGNAL 参数,这样就不会发送SIGPIPE信号了。
	    		 send(sockfd,buf,len,MSG_NOSIGNAL);
		但即使是这样，其他信号仍然会被发送，并且导致系统调用提前返回。如果要可靠地发送指定数据量的字节，必须使用循环发送：
				int send_byte(int sockfd,const char* buf,int len)
				{
					int rc;
					int byte;
					/*发送所有数据时也会终止*/
					for(byte=0;byte<len;byte+=rc){
					rc=send(sockfd,buf+byte,len-byte,MSG_NOSIGNAL);  
					if(rc<0 && errno!= EINTR){  /*错误出现并且不是由于收到一个信号而导致的话才终止*/
					/*如果是由于收到信号而被终止时 errno=EINTR*/
					 	byte=-1;
						break;
						}
					}
					return byte;
				}
	      EINTR  A signal occurred before any  data  was  transmitted;  see  signal(7).

		这个函数可以使用socket描述符sockfd可靠的发送 len 个字节，buf指向待发送的缓冲区。
		可靠的接收指定数量字节的函数实现如下:
			
			int recv_byte(int sockfd,char* buf,int len)
			{
				int rc;
				int byte;
				for(byte=0;byte<len;byte+=len){
				re=recv(sockfd,buf+byte,len-byte,MSG_NOSIGNAL);
				if(rc==0) break; /*表示在收到任何数据之前先收到了对放切断连接的通知*/
				if(rc<0 && errno!=EINTR){
					byte=-1;
					break;
				}
			     }
			return byte;
			}



	   多路复用
		由于对文件进行读写操作时，有阻塞和非阻塞两种方式。考虑到设备文件或 socket 进行读写操作的情况，这时阻塞是经常遇到的。
	     当进程被阻塞时，就不能再对其他文件做出响应。如果使用非阻塞的I/O操作，则进程必须反复的论询文件，来判断文件何时可读写，这
	     样的效率是很低的。
	        Linux系统提供了一种多路复用的方式让单个进程能够同时监视多个文件描述符。可以使用select/poll来实现多路复用。
		就绪状态指的是 读文件是不会阻塞，或者写文件时不会阻塞，或者文件有异常状态等待处理。
		使用select同时监视多个I/O设备时，只要其中任意一个达到所要求的状态(可读/可写/文件有异常状态需要处理)，函数就会返回，返回
	     之后readfds,writefds,exceptfds内容就会被修改，只留下那些处于就绪状态的文件描述符。因为已经就绪所以对这些文件的操作都不会阻塞。
	   注意：由于select函数返回时会对输入的文件集合进行修改，去掉那些不在就绪状态的文件描述符，因此如果再次调用select，则必须重新设定
		 这些集合的内容。
	     
	    使用多进程并发的虽然可因解决同时接收多个客户端连接的问题，但是也有自己的缺点。首先，在进程之间需要共享数据的情况下，多进程可能
	有复杂的同步问题；其次， 创建新进程本身要消耗一定的系统资源，进程键频繁的切换也会使执行效率降低。在嵌入式领域，主机的各种资源都比较
	有限，所以使用多进程来处理并发就显得有点低效率。
	   使用多路复用的方式，可以使用一个进程监视多个文件描述符，这样不用多进程就可以对多个socket描述符做出响应，从而接收多个客户端的同时
	连接。这种方式要注意的问题是：“服务器程序在处理某个客户端的连接请求或通信时不能阻塞，否则将暂时失去对其他客户的相应：”@@@@@@@@@@@@
		recv(sockfd,buf,BUFSIZE,MSG_DONTWAIT);

	主要代码为下：
fd_set rfds;
int nfds;
socket_t sock_listen=listen(...);
while(1){
	/*设置文件集合*/
	FD_ZERO(&rfds);
	FD_SET(sock_listen,&rfds);
	nfds=sock_listen+1;
	for(i=0;i<CLIENT_NUM;++i){
		if(client[i].sockfd>0){
			FD_SET(client[i].sockfd,&rds);
			if(client[i].sockfd>=nfds)
				nfds=client[i].sockfd+1;
		}
	}
	/*监视文件描述符*/
	if(select(nfds,&rfds,NULL,NULL,NULL)){
		/*如果侦听的socket可读则进行接受操作*/
		if(FD_ISSET(sock_listen,&rfds)){
			tmpsock=accept(....);
			client[x]=tmpsock;
		}
		for(i=0;i<CLIENT_NUM;++i){
			/*如果就绪就处理*/
			if(FD_ISSET(client[i].sockfd,&rfds)){
				recv(client[i].sockfd,...,MSG_DONTWAIT);  /*注意为非阻塞!*/
			}
				
		}
	}
	else
		perror("select()");
}
		

=======================================================================================================================
UDP
	在文件sftp_udp.c中利用UDP实现了简单的SFTP服务器。



























